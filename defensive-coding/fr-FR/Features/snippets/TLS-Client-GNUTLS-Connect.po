# AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Jérôme Fenal <jfenal@gmail.com>, 2013
msgid ""
msgstr ""
"Project-Id-Version: Defensive Coding Guide\n"
"POT-Creation-Date: 2013-03-12T03:19:44\n"
"PO-Revision-Date: 2013-03-20 13:04+0000\n"
"Last-Translator: Jérôme Fenal <jfenal@gmail.com>\n"
"Language-Team: French <trans-fr@lists.fedoraproject.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"// Create the session object.\n"
"gnutls_session_t session;\n"
"ret = gnutls_init(&amp;session, GNUTLS_CLIENT);\n"
"if (ret != GNUTLS_E_SUCCESS) {\n"
"  fprintf(stderr, \"error: gnutls_init: %s\n"
"\",\n"
"\t    gnutls_strerror(ret));\n"
"  exit(1);\n"
"}\n"
"\n"
"// Configure the cipher preferences.\n"
"const char *errptr = NULL;\n"
"ret = gnutls_priority_set_direct(session, \"NORMAL\", &amp;errptr);\n"
"if (ret != GNUTLS_E_SUCCESS) {\n"
"  fprintf(stderr, \"error: gnutls_priority_set_direct: %s\n"
"\"\n"
"\t    \"error: at: \\\"%s\\\"\n"
"\", gnutls_strerror(ret), errptr);\n"
"  exit(1);\n"
"}\n"
"\n"
"// Install the trusted certificates.\n"
"ret = gnutls_credentials_set(session, GNUTLS_CRD_CERTIFICATE, cred);\n"
"if (ret != GNUTLS_E_SUCCESS) {\n"
"  fprintf(stderr, \"error: gnutls_credentials_set: %s\n"
"\",\n"
"\t    gnutls_strerror(ret));\n"
"  exit(1);\n"
"}\n"
"\n"
"// Associate the socket with the session object and set the server\n"
"// name.\n"
"gnutls_transport_set_ptr(session, (gnutls_transport_ptr_t)(uintptr_t)sockfd);\n"
"ret = gnutls_server_name_set(session, GNUTLS_NAME_DNS,\n"
"\t\t\t       host, strlen(host));\n"
"if (ret != GNUTLS_E_SUCCESS) {\n"
"  fprintf(stderr, \"error: gnutls_server_name_set: %s\n"
"\",\n"
"\t    gnutls_strerror(ret));\n"
"  exit(1);\n"
"}\n"
"\n"
"// Establish the session.\n"
"ret = gnutls_handshake(session);\n"
"if (ret != GNUTLS_E_SUCCESS) {\n"
"  fprintf(stderr, \"error: gnutls_handshake: %s\n"
"\",\n"
"\t    gnutls_strerror(ret));\n"
"  exit(1);\n"
"}\n"
msgstr "\n// Create the session object.\ngnutls_session_t session;\nret = gnutls_init(&amp;session, GNUTLS_CLIENT);\nif (ret != GNUTLS_E_SUCCESS) {\n  fprintf(stderr, \"error: gnutls_init: %s\n\",\n\t    gnutls_strerror(ret));\n  exit(1);\n}\n\n// Configure the cipher preferences.\nconst char *errptr = NULL;\nret = gnutls_priority_set_direct(session, \"NORMAL\", &amp;errptr);\nif (ret != GNUTLS_E_SUCCESS) {\n  fprintf(stderr, \"error: gnutls_priority_set_direct: %s\n\"\n\t    \"error: at: \\\"%s\\\"\n\", gnutls_strerror(ret), errptr);\n  exit(1);\n}\n\n// Install the trusted certificates.\nret = gnutls_credentials_set(session, GNUTLS_CRD_CERTIFICATE, cred);\nif (ret != GNUTLS_E_SUCCESS) {\n  fprintf(stderr, \"error: gnutls_credentials_set: %s\n\",\n\t    gnutls_strerror(ret));\n  exit(1);\n}\n\n// Associate the socket with the session object and set the server\n// name.\ngnutls_transport_set_ptr(session, (gnutls_transport_ptr_t)(uintptr_t)sockfd);\nret = gnutls_server_name_set(session, GNUTLS_NAME_DNS,\n\t\t\t       host, strlen(host));\nif (ret != GNUTLS_E_SUCCESS) {\n  fprintf(stderr, \"error: gnutls_server_name_set: %s\n\",\n\t    gnutls_strerror(ret));\n  exit(1);\n}\n\n// Establish the session.\nret = gnutls_handshake(session);\nif (ret != GNUTLS_E_SUCCESS) {\n  fprintf(stderr, \"error: gnutls_handshake: %s\n\",\n\t    gnutls_strerror(ret));\n  exit(1);\n}\n"
