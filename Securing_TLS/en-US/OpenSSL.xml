<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Securing_TLS.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-Fedora_Security_Team-Securing_TLS-OpenSSL">
	<title>OpenSSL</title>
	<para>
		<application>OpenSSL</application> is a popular and powerful open source toolkit for implementing SSL and TLS.  It's used to add SSL and TLS encryption to other popular software like <application>Apache</application>, <application>dovecot</application>, and <application>ejabberd</application>.
	</para>
	<section id="sect-Fedora_Security_Team-Securing_TLS-OpenSSL-Cipher_Categories">
		<title>Cipher Categories</title>
		<para><application>OpenSSL</application> groups cipher suites together into easy to define sets that make it easy to implement encryption that makes sense for individual systems.  These sets include <literal>HIGH</literal>, <literal>MEDIUM</literal>, <literal>LOW</literal>, <literal>EXPORT</literal>, and <literal>DEFAULT</literal>.  By utilizing one, or a combination, of these sets in configuration files, the systems administrator can define many ciphers at once.</para>
		<section id="sect-Fedora_Security_Team-Securing_TLS-OpenSSL-Cipher_Categories-High">
			<title><literal>High</literal> Ciphers</title>
			<para><literal>HIGH</literal> ciphers are the ciphers that offer the best protection (generally speaking these cipher suites provide robust 128-bits of security although this is does not hold up completely).</para> 
			<para>The current <literal>HIGH</literal> cipher suites offered by OpenSSL (version 1.0.1e) are:
<screen>
ECDHE-RSA-AES256-GCM-SHA384 TLSv1.2
ECDHE-ECDSA-AES256-GCM-SHA384 TLSv1.2
ECDHE-RSA-AES256-SHA384 TLSv1.2
ECDHE-ECDSA-AES256-SHA384 TLSv1.2
ECDHE-RSA-AES256-SHA    SSLv3
ECDHE-ECDSA-AES256-SHA  SSLv3
DHE-DSS-AES256-GCM-SHA384 TLSv1.2
DHE-RSA-AES256-GCM-SHA384 TLSv1.2
DHE-RSA-AES256-SHA256   TLSv1.2
DHE-DSS-AES256-SHA256   TLSv1.2
DHE-RSA-AES256-SHA      SSLv3
DHE-DSS-AES256-SHA      SSLv3
DHE-RSA-CAMELLIA256-SHA SSLv3
DHE-DSS-CAMELLIA256-SHA SSLv3
AECDH-AES256-SHA        SSLv3
ADH-AES256-GCM-SHA384   TLSv1.2
ADH-AES256-SHA256       TLSv1.2
ADH-AES256-SHA          SSLv3
ADH-CAMELLIA256-SHA     SSLv3
ECDH-RSA-AES256-GCM-SHA384 TLSv1.2
ECDH-ECDSA-AES256-GCM-SHA384 TLSv1.2
ECDH-RSA-AES256-SHA384  TLSv1.2 
ECDH-ECDSA-AES256-SHA384 TLSv1.2
ECDH-RSA-AES256-SHA     SSLv3
ECDH-ECDSA-AES256-SHA   SSLv3
AES256-GCM-SHA384       TLSv1.2
AES256-SHA256           TLSv1.2
AES256-SHA              SSLv3
CAMELLIA256-SHA         SSLv3
PSK-AES256-CBC-SHA      SSLv3
ECDHE-RSA-DES-CBC3-SHA  SSLv3
ECDHE-ECDSA-DES-CBC3-SHA SSLv3
EDH-RSA-DES-CBC3-SHA    SSLv3
EDH-DSS-DES-CBC3-SHA    SSLv3
AECDH-DES-CBC3-SHA      SSLv3
ADH-DES-CBC3-SHA        SSLv3
ECDH-RSA-DES-CBC3-SHA   SSLv3
ECDH-ECDSA-DES-CBC3-SHA SSLv3
DES-CBC3-SHA            SSLv3
DES-CBC3-MD5            SSLv2
PSK-3DES-EDE-CBC-SHA    SSLv3
KRB5-DES-CBC3-SHA       SSLv3
KRB5-DES-CBC3-MD5       SSLv3
ECDHE-RSA-AES128-GCM-SHA256 TLSv1.2
ECDHE-ECDSA-AES128-GCM-SHA256 TLSv1.2
ECDHE-RSA-AES128-SHA256 TLSv1.2
ECDHE-ECDSA-AES128-SHA256 TLSv1.2
ECDHE-RSA-AES128-SHA    SSLv3
ECDHE-ECDSA-AES128-SHA  SSLv3
DHE-DSS-AES128-GCM-SHA256 TLSv1.2
DHE-RSA-AES128-GCM-SHA256 TLSv1.2
DHE-RSA-AES128-SHA256   TLSv1.2
DHE-DSS-AES128-SHA256   TLSv1.2
DHE-RSA-AES128-SHA      SSLv3
DHE-DSS-AES128-SHA      SSLv3
DHE-RSA-CAMELLIA128-SHA SSLv3
DHE-DSS-CAMELLIA128-SHA SSLv3
AECDH-AES128-SHA        SSLv3
ADH-AES128-GCM-SHA256   TLSv1.2
ADH-AES128-SHA256       TLSv1.2
ADH-AES128-SHA          SSLv3
ADH-CAMELLIA128-SHA     SSLv3
ECDH-RSA-AES128-GCM-SHA256 TLSv1.2
ECDH-ECDSA-AES128-GCM-SHA256 TLSv1.2
ECDH-RSA-AES128-SHA256  TLSv1.2 
ECDH-ECDSA-AES128-SHA256 TLSv1.2
ECDH-RSA-AES128-SHA     SSLv3
ECDH-ECDSA-AES128-SHA   SSLv3
AES128-GCM-SHA256       TLSv1.2
AES128-SHA256           TLSv1.2
AES128-SHA              SSLv3
CAMELLIA128-SHA         SSLv3
PSK-AES128-CBC-SHA      SSLv3
</screen>
			</para>
		</section>
                <section id="sect-Fedora_Security_Team-Securing_TLS-OpenSSL-Cipher_Categories-Medium">
                        <title>Medium Ciphers</title>
                        <para><literal>MEDIUM</literal> ciphers are the ciphers that offer moderate protection and should not be used for any serious security.  Many times these ciphers are used for interoperability but that should really be few and far between.</para>
                        <para>The current <literal>MEDIUM</literal> cipher suites offered by OpenSSL (version 1.0.1e) are:
<screen>
DHE-RSA-SEED-SHA        SSLv3
DHE-DSS-SEED-SHA        SSLv3
ADH-SEED-SHA            SSLv3
SEED-SHA                SSLv3
IDEA-CBC-SHA            SSLv3
IDEA-CBC-MD5            SSLv2
RC2-CBC-MD5             SSLv2
KRB5-IDEA-CBC-SHA       SSLv3
KRB5-IDEA-CBC-MD5       SSLv3
ECDHE-RSA-RC4-SHA       SSLv3
ECDHE-ECDSA-RC4-SHA     SSLv3
AECDH-RC4-SHA           SSLv3
ADH-RC4-MD5             SSLv3
ECDH-RSA-RC4-SHA        SSLv3
ECDH-ECDSA-RC4-SHA      SSLv3
RC4-SHA                 SSLv3
RC4-MD5                 SSLv3
RC4-MD5                 SSLv2
PSK-RC4-SHA             SSLv3
KRB5-RC4-SHA            SSLv3
KRB5-RC4-MD5            SSLv3
</screen>
			</para>
                </section>
                <section id="sect-Fedora_Security_Team-Securing_TLS-OpenSSL-Cipher_Categories-Low">
                        <title>Low Ciphers</title>
                        <para><literal>LOW</literal> ciphers are the ciphers that offer little to no protection and should not be used for any serious security.  Many times these ciphers are used for interoperability but that should really be few and far between.</para>
                        <para>The current <literal>LOW</literal> cipher suites offered by OpenSSL (version 1.0.1e) are:
<screen>
EDH-RSA-DES-CBC-SHA     SSLv3 
EDH-DSS-DES-CBC-SHA     SSLv3 
ADH-DES-CBC-SHA         SSLv3 
DES-CBC-SHA             SSLv3 
DES-CBC-MD5             SSLv2 
KRB5-DES-CBC-SHA        SSLv3 
KRB5-DES-CBC-MD5        SSLv3 
</screen>
			</para>
                </section>
                <section id="sect-Fedora_Security_Team-Securing_TLS-OpenSSL-Cipher_Categories-Export">
                        <title>Export Ciphers</title>
                        <para><literal>EXPORT</literal> ciphers are the ciphers that offer little to no protection and should not be used for any serious security.  Many times these ciphers are used for interoperability but that should really be few and far between.</para>
                        <para>The current <literal>EXPORT</literal> cipher suites offered by OpenSSL (version 1.0.1e) are:
<screen>
EXP-EDH-RSA-DES-CBC-SHA SSLv3
EXP-EDH-DSS-DES-CBC-SHA SSLv3
EXP-ADH-DES-CBC-SHA     SSLv3
EXP-DES-CBC-SHA         SSLv3
EXP-RC2-CBC-MD5         SSLv3
EXP-RC2-CBC-MD5         SSLv2
EXP-KRB5-RC2-CBC-SHA    SSLv3
EXP-KRB5-DES-CBC-SHA    SSLv3
EXP-KRB5-RC2-CBC-MD5    SSLv3
EXP-KRB5-DES-CBC-MD5    SSLv3
EXP-ADH-RC4-MD5         SSLv3
EXP-RC4-MD5             SSLv3
EXP-RC4-MD5             SSLv2
EXP-KRB5-RC4-SHA        SSLv3
EXP-KRB5-RC4-MD5        SSLv3
</screen>
			</para>
		</section>
	</section>
	<section id="sect-Fedora_Security_Team-Securing_TLS-OpenSSL-Generating_Crypto">
		<title>Generating Crypto</title>
		<para>Properly generating keys and certificates is as important as the ciphers suite being used to secure the circuit.  The best cipher can be broken with improperly generated keys.</para>

		<section id="sect-Fedora_Security_Team-Securing_TLS-OpenSSL-Generating_Crypto-RSA">
			<title>Generating RSA keys</title>
			<para>RSA keys are the most common key type used to secure SSL and TLS circuits.  It's relatively simple to generate keys and we'll describe how and why now.</para>
			<para>
<screen>
openssl genrsa -aes128 -out key_name.key 3072
</screen>
This will generate a 3072-bit RSA key that is sufficently large for true 128 bits of security.  To obtain 256 bits of security the RSA key will need to be 15360 bits.  If you require that type of security, however, a ECDSA key should be utilized.
<important><para>The industry standard 2048-bit RSA key only provides 112 bits of security.<footnote><para>NIST SP 800-57 Part 1, Rev 3 <ulink url="http://csrc.nist.gov/publications/nistpubs/800-57/sp800-57_part1_rev3_general.pdf" /></para></footnote></para></important>

<screen>
openssl rsa -in key_name.key -out key_name.key
</screen>
This simply removes the password that was placed on the key at generation.  You can do this once you are sure you no longer need to protect the key (like when it's going to be used on the server).

<screen>
openssl req -new -key key_name.key -out key_name.csr
</screen>
This will generate a certificate signing request (<abbrev>CSR</abbrev>) to provide to your certificate authority (<abbrev>CA</abbrev>) for signing.

<screen>
openssl x509 -req -days 365 -sha384 -in key_name.csr -signkey key_name.key -out key_name.crt
</screen>
<emphasis>Optional</emphasis> - This last step isn't generally necessary.  This is what the CA does on their side except they use their key in place of key_name.key to sign your key.  By doing this you are creating a self-signed certificate which is not very useful and should only be used for testing purposes.
			</para>
		</section>
                <section id="sect-Fedora_Security_Team-Securing_TLS-OpenSSL-Generating_Crypto-ECDSA">
			<title>Generating ECDSA keys</title>
			<para>ECDSA keys are part of the latest generation of cryptography used in TLS-protected circuits.  ECDSA keys do not have to be as large as an RSA key to provide similar protection.</para>
			<para>The process for generating an ECDSA key is similar to that of RSA and we'll go over the commands now.

<screen>
openssl ecparam -genkey -name <emphasis>curve</emphasis> -out key_name.pem
</screen>
In this command you must provide the name of the curve to use.  There are many curves to choose from but based on your particular installation of OpenSSL your choices may be limited.  To determine what curves are available you run <command>openssl ecparam -list_curves</command>.
<screen>
openssl req -new -key key_name.key -out key_name.csr
</screen>
This will generate a certificate signing request (<abbrev>CSR</abbrev>) to provide to your certificate authority (<abbrev>CA</abbrev>) for signing.
<note><para>It's important to find a CA that will sign your ECDSA key with an ECDSA key to keep the security level high.</para></note>
<screen>
openssl req -x509 -newkey ecdsa:ECC_params.pem -keyout server.key -out server.crt -subj /CN=localhost -nodes -batch
</screen>
This command will actually generate a self-signed certificate in one swipe.
			</para>
		</section>
	</section>
</chapter>

